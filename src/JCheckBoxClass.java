import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

public class JCheckBoxClass {
    public static void main(String[] args) {
        /*
        The JCheckBox class is used to represent check-box buttons. Check-box buttons
        are useful in presenting a collection of binary (yes/no, true/false) options. The frame
        shown in Figure 14.22 gives the user the option to select the programming languages he
        or she can program with by clicking on the appropriate check-box button.

        To check if a check-box button is selected (i.e., has a check mark) or deselected, we
        call its isSelected method.

        We can retrieve the text associated to a check-box button by calling its getText method.
        We can use the corresponding setText method to change the button text.
        */

        // Ch14CheckBoxSample1 checkBoxSample1 = new Ch14CheckBoxSample1();
        // checkBoxSample1.setVisible(true);

        /*
        Although we did not process them in the Ch14JCheckBoxSample1 program, a
        JCheckBox object generates action events just as any other buttons do. So we can associate an action listener to
        JCheckBox objects, but it is not that common to process
        action events generated by JCheckBox objects. In addition, a JCheckBox object generates another type of event
        called item events. An item event is generated when the
        state (selected or deselected) of a check-box button changes. We can register an instance of a class that
        implements the ItemListener interface as an item listener of a
        JCheckBox object. When an item event is generated, its itemStateChanged method
        is called. Inside the method, we can check the state of change by calling the getStateChange method
        */

        Ch14CheckBoxSample2 checkBoxSample2 = new Ch14CheckBoxSample2();
        checkBoxSample2.setVisible(true);
    }
}

class Ch14CheckBoxSample1 extends JFrame implements ActionListener {
    // data members
    private static final int FRAME_WIDTH = 300;
    private static final int FRAME_HEIGHT = 200;
    private static final int FRAME_X_ORIGIN = 150;
    private static final int FRAME_Y_ORIGIN = 250;
    private JCheckBox[] checkBox;

    // constructors
    public Ch14CheckBoxSample1() {
        Container contentPane;
        JPanel checkPanel, okPanel;
        JButton okButton;
        String[] btnText = {"Java", "C++", "Smalltalk", "Ada"};

        //set the frame properties
        setSize (FRAME_WIDTH, FRAME_HEIGHT);
        setTitle ("Program Ch14JCheckBoxSample1");
        setLocation(FRAME_X_ORIGIN, FRAME_Y_ORIGIN);

        contentPane = getContentPane();
        contentPane.setBackground(Color.DARK_GRAY);
        contentPane.setLayout(new BorderLayout());

        // create and place the checkboxes
        checkPanel = new JPanel(new GridLayout(0, 1));
        checkPanel.setBorder(BorderFactory.createTitledBorder("Can Program In"));

        checkBox = new JCheckBox[btnText.length];

        for (int i = 0; i < btnText.length; i++) {
            checkBox[i] = new JCheckBox(btnText[i]);
            checkPanel.add(checkBox[i]);
        }

        //create and place the OK button
        okPanel = new JPanel(new FlowLayout());
        okButton = new JButton("OK");
        okButton.addActionListener(this);
        okPanel.add(okButton);

        contentPane.add(checkPanel, BorderLayout.CENTER);
        contentPane.add(okPanel, BorderLayout.SOUTH);

        //register 'Exit upon closing' as a default close operation
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // iterate over the checkboxes and add selected skills
        StringBuilder skill = new StringBuilder("You can program in\n");

        for (int i = 0; i < checkBox.length; i++) {
            if (checkBox[i].isSelected()) {
                skill.append(checkBox[i].getText()).append("\n");
            }
        }

        JOptionPane.showMessageDialog(this, skill.toString());
    }
}

class Ch14CheckBoxSample2 extends JFrame implements ActionListener, ItemListener {
    // data members
    private static final int FRAME_WIDTH = 300;
    private static final int FRAME_HEIGHT = 200;
    private static final int FRAME_X_ORIGIN = 150;
    private static final int FRAME_Y_ORIGIN = 250;
    private JCheckBox[] checkBox;

    // constructors
    public Ch14CheckBoxSample2() {
        Container contentPane;
        JPanel checkPanel, okPanel;
        JButton okButton;
        String[] btnText = {"Java", "C++", "Smalltalk", "Ada"};

        //set the frame properties
        setSize (FRAME_WIDTH, FRAME_HEIGHT);
        setTitle ("Program Ch14JCheckBoxSample1");
        setLocation(FRAME_X_ORIGIN, FRAME_Y_ORIGIN);

        contentPane = getContentPane();
        contentPane.setBackground(Color.DARK_GRAY);
        contentPane.setLayout(new BorderLayout());

        // create and place the checkboxes
        checkPanel = new JPanel(new GridLayout(0, 1));
        checkPanel.setBorder(BorderFactory.createTitledBorder("Can Program In"));

        checkBox = new JCheckBox[btnText.length];

        for (int i = 0; i < btnText.length; i++) {
            checkBox[i] = new JCheckBox(btnText[i]);
            checkPanel.add(checkBox[i]);
            checkBox[i].addItemListener(this);
        }

        //create and place the OK button
        okPanel = new JPanel(new FlowLayout());
        okButton = new JButton("OK");
        okButton.addActionListener(this);
        okPanel.add(okButton);

        contentPane.add(checkPanel, BorderLayout.CENTER);
        contentPane.add(okPanel, BorderLayout.SOUTH);

        //register 'Exit upon closing' as a default close operation
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // iterate over the checkboxes and add selected skills
        StringBuilder skill = new StringBuilder("You can program in\n");

        for (int i = 0; i < checkBox.length; i++) {
            if (checkBox[i].isSelected()) {
                skill.append(checkBox[i].getText()).append("\n");
            }
        }

        JOptionPane.showMessageDialog(this, skill.toString());
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        JCheckBox source = (JCheckBox) e.getSource();
        String state;

        if (e.getStateChange() == ItemEvent.SELECTED) {
            state = source.getText() + " selected";
        } else {
            state = source.getText() + " deselected";
        }

        setTitle(state);
    }
}